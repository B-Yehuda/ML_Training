[Redshift_Data]
# query to fetch data
query = select distinct provider_id
              , viewers_trend_flag
              , chatters_to_watchtime_flag
              , creator_chat_inactive_flag
              , social_links_missing_flag
              , description_missing_flag
        from bi_db.fake_channels_flags_current
        where provider_id in ('82550365')
;        order by provider_id asc
;        limit 15


[Data_Processing]


[Model_Parameters]
# Define videos to scrape per channel
videos_to_scrape_per_channel = 10

# Define videos quality to scrape
video_quality = 480p

# Define maximum processing time (hrs) from video length
video_max_process_time_hrs = 1

# Define frames to skip
skip_frames_by_seconds = 5
skip_frames_by_rate = False


[Scoring_Functions]


[AWS]
# ID of AWS bucket
predictions_to_aws_bucket = temp-yoav

# Folder path in AWS bucket
folder_path_of_predictions_file = face_detection/


[GCS]
# ID of GCS bucket
predictions_to_bigquery_bucket = streamelements-datalake3

# Folder path in GCS bucket
folder_path_of_predictions_file = fake_channel_detection/


[Dataset]
# File name
filename =

# Choose 1 of the following locations: LOCAL, REDSHIFT, GCS, GCS_VIA_LOCAL
location = REDSHIFT


[Locations]
# Choose 1 of the following locations: LOCAL_CSV, LOCAL_JSON, REDSHIFT, GCS, GCS_VIA_LOCAL, AWS, AWS_VIA_LOCAL
location_for_writing_face_detection_data = GCS_VIA_LOCAL


[Pipeline]
# Pipeline name
pipeline_name = Twitch_Fake_Channels

# Choose the following pipeline:
pipeline = Face_Detection